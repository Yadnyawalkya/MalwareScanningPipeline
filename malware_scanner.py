import csv
import git
import os
import pandas as pd
import re
import subprocess
import shutil
import yaml
from datetime import datetime
from google_drive import authenticate_google_drive, upload_to_google_drive
from email_sender import send_email


def load_config():
    with open("config.yaml", "r") as file:
        config = yaml.safe_load(file)
    return config


config = load_config()
UPLOAD_FOLDER_ID = config["google_drive"]["UPLOAD_FOLDER_ID"]


def create_logs_folder():
    if not os.path.exists("logs"):
        os.makedirs("logs")
        print("Logs folder created.")


def create_repos_folder():
    shutil.rmtree("repos", ignore_errors=True)
    if not os.path.exists("repos"):
        os.makedirs("repos")
        print("Repos folder created.")


def update_clamav_database():
    try:
        subprocess.run("freshclam", shell=True, check=True)
        print("ClamAV database updated successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error updating ClamAV database: {e}")


def parse_scan_log(log_file_path):
    with open(log_file_path, "r") as log_file:
        log_content = log_file.read()

        known_viruses_match = re.search(r"Known viruses: (\d+)", log_content)
        known_viruses = known_viruses_match.group(1) if known_viruses_match else "0"

        scanned_dirs_match = re.search(r"Scanned directories: (\d+)", log_content)
        scanned_dirs = scanned_dirs_match.group(1) if scanned_dirs_match else "0"

        scanned_files_match = re.search(r"Scanned files: (\d+)", log_content)
        scanned_files = scanned_files_match.group(1) if scanned_files_match else "0"

        infected_files_match = re.search(r"Infected files: (\d+)", log_content)
        infected_files = infected_files_match.group(1) if infected_files_match else "0"

    return known_viruses, scanned_dirs, scanned_files, infected_files


def append_to_csv(csv_file, data):
    existing_data = []
    if os.path.exists(csv_file):
        with open(csv_file, "r", newline="") as csvfile:
            csv_reader = csv.reader(csvfile)
            existing_data = list(csv_reader)
    updated_data = [data] + existing_data
    with open(csv_file, "w", newline="") as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerows(updated_data)


def clone_repository(repo_url):
    repo_name = repo_url.split("/")[-1].replace(".git", "")
    repo_path = f"repos/{repo_name}"
    try:
        repo = git.Repo.clone_from(repo_url, repo_path)
        print(f"Repository {repo_url} cloned successfully.")
        return repo_name
    except git.exc.GitCommandError as e:
        print(f"Error cloning repository {repo_url}: {e}")
        return None


def process_repository(repo_url, csv_file, drive_service):
    repo_name = clone_repository(repo_url)
    if repo_name:
        current_datetime = datetime.now()
        formatted_datetime = current_datetime.strftime("%Y-%m-%d:%H-%M-%S")
        log_file_path = f"logs/{repo_name}-{formatted_datetime}_scan.log"
        scan_command = (
            f"clamscan -v -a --bell --log={log_file_path} -r -z repos/{repo_name}"
        )
        try:
            subprocess.run(scan_command, shell=True, check=True)
            print(f"Repository {repo_name} scanned for malware. Log saved at: {log_file_path}")
        except subprocess.CalledProcessError as e:
            print(f"Error scanning repository {repo_name} for malware: {e}")
            log_file_path = None

        if log_file_path:
            log_link = upload_to_google_drive(
                drive_service, os.path.join(log_file_path), UPLOAD_FOLDER_ID
            )
            known_viruses, scanned_dirs, scanned_files, infected_files = parse_scan_log(log_file_path)
            repository_link = repo_url
            result = "PASSED" if infected_files == "0" else "FAILED"

            if result == "FAILED":
                subject = "[Important] Malware found in HMS project"
                body = f"Malware found in {repository_link} repository. Please visit {config['project']['hostname']}/{config['project']['project_key']}.html for more details. Relevent log can be accessible on: {log_link}"
                send_email(subject, body)

            date_link = f'<a href="{log_link}">{formatted_datetime}</a>'

            data = [
                date_link,
                repository_link,
                known_viruses,
                scanned_dirs,
                scanned_files,
                infected_files,
                result,
            ]
            csv_file_path = os.path.join("logs", csv_file)
            append_to_csv(csv_file_path, data)
            shutil.rmtree("repos", ignore_errors=True)


def generate_html_table(csv_file):
    df = pd.read_csv(os.path.join("logs", csv_file))
    df.sort_values(by="Date and Time", ascending=False, inplace=True)
    html_table = df.to_html(
        index=False, escape=False, classes="table table-striped table-bordered"
    )
    html_table = re.sub(r"<td>(PASSED)</td>", r'<td class="passed">\1</td>', html_table)
    html_table = re.sub(r"<td>(FAILED)</td>", r'<td class="failed">\1</td>', html_table)

    for index, row in df.iterrows():
        log_file_name = f'{row["Repository Name"]}-{row["Date and Time"].replace(":", "-")}_scan.log'
        log_file_path = os.path.join("logs", log_file_name)
        log_link = f'{row["Date and Time"]}'
        html_table = html_table.replace(row["Date and Time"], log_link)

    with open("template.html", "r") as template_file:
        template_content = template_file.read()

    template_content = template_content.replace(
        "Malware Scan Results: ",
        f"Malware Scan Results: {config['project']['project_key']}",
    )
    template_content = template_content.replace(
        "<!-- Dynamic content will be inserted here -->", html_table
    )

    html_file_path = "/var/www/html/hms.html"
    with open(html_file_path, "w") as html_file:
        html_file.write(template_content)

    print(f"HTML file generated and copied to {html_file_path}")
